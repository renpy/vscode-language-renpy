{
  "information_for_contributors": [ "Please remember to regenerate the ts token patterns using the 'syntax-to-token-pattern.py' python script", "Keys prefixed with-x are currently unused" ],
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ren'Py",
  "scopeName": "source.renpy",
  "patterns": [ { "include": "#base-patterns" } ],
  "repository": {
    "statements": {
      "patterns": [ { "include": "#renpy-statements" }, { "include": "#python-statements" }, { "include": "#conditionals" }, { "include": "#keywords" }, { "include": "#say-statements" } ]
    },
    "expressions": {
      "patterns": [ { "include": "#renpy-python-expressions" }, { "include": "#fallback-patterns" } ]
    },
    "renpy-only-expressions": {
      "patterns": [ { "include": "#comments" }, { "include": "#strings" }, { "include": "#literal" } ]
    },
    "renpy-python-expressions": {
      "patterns": [ { "include": "#renpy-only-expressions" } ]
    },
    "invalid-token": {
      "match": "\\b\\w+\\b|.+?",
      "name": "invalid.unknown.token.renpy"
    },
    "new-line": {
      "match": "\\r\\n|\\r|\\n",
      "name": "punctuation.new-line.renpy"
    },
    "whitespace": {
      "match": "[ \\t]+",
      "name": "punctuation.whitespace.renpy"
    },
    "single-characters": {
      "comment": "NOTE: Having these patterns separated increases performance. Benchmark before making a change!",
      "patterns": [
        { "include": "#new-line" },
        { "include": "#whitespace" },
        {
          "name": "punctuation.parenthesis.begin.renpy",
          "match": "\\("
        },
        {
          "name": "punctuation.parenthesis.end.renpy",
          "match": "\\)"
        },

        {
          "name": "punctuation.bracket.begin.renpy",
          "match": "{"
        },
        {
          "name": "punctuation.bracket.end.renpy",
          "match": "}"
        },

        {
          "name": "punctuation.square-bracket.begin.renpy",
          "match": "\\["
        },
        {
          "name": "punctuation.square-bracket.end.renpy",
          "match": "\\]"
        },

        {
          "name": "punctuation.dot.renpy",
          "match": "\\."
        },
        {
          "name": "punctuation.colon.renpy",
          "match": ":"
        },
        {
          "name": "punctuation.semicolon.renpy",
          "match": ";"
        },
        {
          "name": "punctuation.comma.renpy",
          "match": ","
        },
        {
          "name": "punctuation.hashtag.renpy",
          "match": "#"
        },

        {
          "name": "punctuation.quote.renpy",
          "match": "'"
        },
        {
          "name": "punctuation.double-quote.renpy",
          "match": "\""
        },
        {
          "name": "punctuation.back-quote.renpy",
          "match": "`"
        },

        {
          "name": "punctuation.backslash.renpy",
          "match": "\\\\"
        },
        {
          "name": "punctuation.forward-slash.renpy",
          "match": "/"
        },
        {
          "name": "punctuation.equals-symbol.renpy",
          "match": "="
        }
      ]
    },
    "fallback-patterns": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#single-characters" },
        {
          "name": "debug.invalid.illegal.unmatched.renpy",
          "match": "\\b\\w+\\b"
        },
        {
          "name": "punctuation.unknown.renpy",
          "match": "."
        }
      ]
    },

    "fallback-patterns-with-error": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#single-characters" },
        { "include": "#invalid-token" }
      ]
    },

    "literal": {
      "patterns": [
        {
          "comment": "Python literals",
          "name": "constant.language.renpy",
          "match": "\\b(?<!\\.)(True|False|None)\\b"
        },
        { "include": "source.renpy.python#literal" }
      ]
    },

    "num-float": {
      "match": "([\\+\\-])?(\\d+\\.?\\d*|\\.\\d+)([eE][\\-\\+]?\\d+)?",
      "captures": {
        "1": { "name": "keyword.operator.arithmetic.renpy" },
        "2": { "name": "constant.numeric.float.renpy" },
        "3": { "name": "constant.numeric.float.renpy" }
      }
    },
    "num-int": {
      "name": "constant.numeric.integer.renpy",
      "match": "(?<![\\w.])(?:[1-9]+|0+|0([0-9]+)(?![eE.]))\\b",
      "captures": {
        "1": { "name": "invalid.illegal.integer.renpy" }
      }
    },

    "parenthesized-python": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": { "name": "punctuation.parenthesis.begin.python.renpy" }
          },
          "end": "\\)",
          "endCaptures": {
            "0": { "name": "punctuation.parenthesis.end.python.renpy" }
          },
          "patterns": [ { "include": "source.renpy.python#expression" } ]
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": { "name": "punctuation.square-bracket.begin.python.renpy" }
          },
          "end": "\\]",
          "endCaptures": {
            "0": { "name": "punctuation.square-bracket.end.python.renpy" }
          },
          "patterns": [ { "include": "source.renpy.python#expression" } ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": { "name": "punctuation.bracket.begin.python.renpy" }
          },
          "end": "\\}",
          "endCaptures": {
            "0": { "name": "punctuation.bracket.end.python.renpy" }
          },
          "patterns": [ { "include": "source.renpy.python#expression" } ]
        }
      ]
    },

    "identifier": {
      "name": "variable.name.renpy",
      "match": "\\b[\\p{XID_Start}_]\\p{XID_Continue}*\\b"
    },

    "illegal-identifiers": {
      "patterns": [
        {
          "name": "invalid.illegal.identifier.renpy",
          "match": "\\b(as|at|behind|call|expression|hide|if|in|image|init|jump|menu|onlayer|python|return|scene|show|with|while|zorder)\\b"
        }
      ]
    },

    "name": {
      "patterns": [ { "include": "#illegal-identifiers" }, { "include": "#identifier" } ]
    },

    "simple-expression": {
      "name": "meta.simple-expression.renpy",
      "begin": "[ \\t]*",
      "end": "(?!\\G)(?![.\\[\\(\\{])|$",
      "patterns": [
        { "include": "source.renpy.python#string" },
        { "include": "#literal" },
        { "include": "#num-float" },
        { "include": "source.renpy.python#member-access" },
        { "include": "source.renpy.python#function-call" },
        { "include": "#identifier" },
        { "include": "#parenthesized-python" },
        { "include": "#comments" },
        { "include": "#whitespace" }
      ]
    },

    "keywords": {
      "comment": "Fallback patterns for unmatched keywords",
      "patterns": [
        {
          "comment": "Control flow keywords",
          "name": "keyword.control.flow.renpy",
          "match": "\\b(?<!\\.)(?:pass|return|pause|if|elif|else|while|for)\\b"
        },
        {
          "comment": "Python statement keywords",
          "match": "\\b(?<!\\.)(define|default|early|hide|in|init|python)\\b",
          "name": "keyword.other.python.renpy"
        },
        {
          "comment": "Renpy keywords",
          "match": "\\b(?<!\\.)(?:camera|image|label|layeredimage|menu|nvl[ \\t]+clear|play|queue|scene|screen|show|transform|translate|voice(?:[ \\t]+sustain)?)\\b",
          "name": "keyword.other.renpy"
        },
        {
          "comment": "[TODO: Should probably only be a keyword in the expression] Renpy sub expression keywords",
          "name": "keyword.other.renpy",
          "match": "\\b(?<!\\.)(?:set|expression|at|with|from|style_prefix|spacing|textbutton)\\b"
        },
        {
          "comment": "[TODO: Should probably only be a keyword in the expression] Renpy sub expression keywords",
          "name": "keyword.control.flow.other.renpy",
          "match": "\\b(?<!\\.)(?:action)\\b"
        }
      ]
    },
    "region-comment": {
      "name": "comment.line.number-sign.renpy",
      "match": "(?<=^[ \\t]*)(#[ \\t]*(?:end)?region)\\b.*$",
      "captures": {
        "1": { "name": "punctuation.definition.tag.region.renpy" }
      }
    },
    "codetags": {
      "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
      "captures": {
        "1": { "name": "keyword.codetag.notation.renpy" }
      }
    },
    "comments-base": {
      "name": "comment.line.number-sign.renpy",
      "begin": "#",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.comment.renpy" }
      },
      "end": "$",
      "patterns": [ { "include": "#codetags" } ]
    },
    "comments": {
      "patterns": [
        { "include": "#region-comment" },
        { "include": "#comments-base" }
      ]
    },
    "escaped_char": {
      "match": "(\\\\\")|(\\\\')|(\\\\ )|(\\\\n)|(\\\\\\\\)|(\\[\\[)|({{)|(%%)",
      "captures": {
        "1": { "name": "constant.character.escape.double-quote.python.renpy" },
        "2": { "name": "constant.character.escape.quote.python.renpy" },
        "3": { "name": "constant.character.escape.whitespace.python.renpy" },
        "4": { "name": "constant.character.escape.newline.python.renpy" },
        "5": { "name": "constant.character.escape.backslash.python.renpy" },
        "6": { "name": "constant.character.escape.open.bracket.python.renpy" },
        "7": { "name": "constant.character.escape.open.square-bracket.python.renpy" },
        "8": { "name": "constant.character.escape.percent.python.renpy" }
      }
    },
    "constant_placeholder": {
      "comment": "Python value interpolation using [ ... ]",
      "name": "constant.other.placeholder.tags.renpy",
      "match": "(\\[)(.*?)(\\])(?![^\\[]*?\\])",
      "captures": {
        "1": { "name": "constant.character.format.placeholder.other.renpy" },
        "2": {
          "name": "meta.embedded.line.python",
          "patterns": [
            {
              "name": "meta.interpolate.flags.renpy",
              "match": "(!)([rstiqulc]+)",
              "captures": {
                "1": { "name": "punctuation.definition.interpolate.flags.begin.renpy" },
                "2": { "name": "storage.modifier.flag.renpy" }
              }
            },
            { "include": "source.renpy.python#expression" }
          ]
        },
        "3": { "name": "constant.character.format.placeholder.other.renpy" }
      }
    },
    "escaped_unicode_char": {
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})",
      "captures": {
        "1": { "name": "constant.character.unicode.16-bit-hex.python.renpy" },
        "2": { "name": "constant.character.unicode.32-bit-hex.python.renpy" },
        "3": { "name": "constant.character.unicode.name.python.renpy" }
      }
    },
    "hex_literal": {
      "patterns": [
        {
          "comment": "rgb, rgba, rrggbb, rrggbbaa",
          "match": "(?i)#(?:[a-f0-9]{8}|[a-f0-9]{6}|[a-f0-9]{3,4})\\b",
          "name": "constant.color.renpy"
        },
        {
          "match": "(?i)#[a-f0-9]+\\b",
          "name": "invalid.illegal.unexpected-number-of-hex-values.renpy"
        },
        {
          "match": "(?i)(#[a-f0-9]*)?(.+?)\\b",
          "captures": {
            "1": { "name": "constant.color.renpy" },
            "2": { "name": "invalid.illegal.character-not-allowed-here.renpy" }
          }
        }
      ]
    },
    "strings-interior": {
      "patterns": [ { "include": "#new-line" }, { "include": "#escaped_char" }, { "include": "#string-tags" }, { "include": "#constant_placeholder" } ]
    },
    "string-tags-broken": {
      "patterns": [
        {
          "comment": "Valid tags without params (optional close)",
          "contentName": "renpy.meta.${2:/downcase} meta.tagged.string.renpy",
          "begin": "({)\\s*(u|i|b|s|plain|alt|noalt|art|rb|rt)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "comment": "Valid tags with numeric params (optional close)",
          "contentName": "renpy.meta.${2:/downcase} meta.tagged.string.renpy",
          "begin": "({)\\s*(alpha|cps|k)(=)(?:(\\*)|(\\-)|(\\+))?(\\d*(?:.\\d+)?)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.Multiply.renpy" },
            "5": { "name": "keyword.operator.arithmetic.Minus.renpy" },
            "6": { "name": "keyword.operator.arithmetic.Plus.renpy" },
            "7": { "name": "support.constant.property-value.renpy constant.numeric.renpy" },
            "8": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "comment": "Valid tags with numeric params (optional close)",
          "contentName": "renpy.meta.${2:/downcase} meta.tagged.string.renpy",
          "begin": "({)\\s*(size)(=)([\\-+]?)(\\d+)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value.renpy constant.numeric.integer.renpy" },
            "6": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "comment": "Valid tags with file param (optional close)",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "begin": "({)\\s*(font)(=)([\\w.]+)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value.renpy string.unquoted.renpy" },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "comment": "Color tag",
          "contentName": "renpy.meta.${2:/downcase}.${4:/downcase} meta.tagged.string.renpy",
          "begin": "({)\\s*(color|outlinecolor)(=)(#?[a-zA-Z0-9]+)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "patterns": [ { "include": "#hex_literal" } ]
            },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "comment": "a tag",
          "contentName": "renpy.meta.${2:/downcase} meta.tagged.string.renpy",
          "begin": "({)\\s*(a)(=)(.*?)\\s*(})",
          "beginCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "name": "support.constant.property-value.renpy string.unquoted.renpy",
              "patterns": [ ]
            },
            "5": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "end": "({/)\\s*(\\2)\\s*(})",
          "endCaptures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.definition.tag.end.renpy" }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        }
      ]
    },
    "string-tags": {
      "patterns": [
        {
          "comment": "Valid tags without params (self-closing)",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(nw|done|fast|p|w|clear)\\s*(})",
          "captures": {
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (self-closing)",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(p|w)(=)(\\+?)(\\d*(?:.\\d+)?)\\s*(})",
          "captures": {
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.plus.renpy" },
            "5": { "name": "support.constant.property-value.renpy constant.numeric.float.renpy" },
            "6": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (self-closing)",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(v?space)(=)(\\+?)(\\d+)\\s*(})",
          "captures": {
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.plus.renpy" },
            "5": { "name": "support.constant.property-value.renpy constant.numeric.integer.renpy" },
            "6": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Comment tag (self-closing)",
          "name": "meta.string.tag.comment.self-closing.renpy",
          "match": "({)\\s*(#)\\s*(.*?)\\s*(})",
          "captures": {
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "comment.line.number-sign.renpy punctuation.definition.comment.renpy" },
            "3": { "name": "comment.line.number-sign.renpy" },
            "4": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with file param",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(image)(=)([\\w.]+)\\s*(})",
          "captures": {
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value.renpy string.unquoted.renpy" },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags without params (optional close)",
          "match": "({)\\s*(u|i|b|s|plain|alt|noalt|art|rb|rt)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (optional close)",
          "match": "({)\\s*(alpha|cps|k)(=)(?:(\\*)|(\\-)|(\\+))?(\\d*(?:.\\d+)?)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.Multiply.renpy" },
            "5": { "name": "keyword.operator.arithmetic.Minus.renpy" },
            "6": { "name": "keyword.operator.arithmetic.Plus.renpy" },
            "7": { "name": "support.constant.property-value.renpy constant.numeric.renpy" },
            "8": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with numeric params (optional close)",
          "match": "({)\\s*(size)(=)([\\-+]?)(\\d+)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "keyword.operator.arithmetic.renpy" },
            "5": { "name": "support.constant.property-value.renpy constant.numeric.integer.renpy" },
            "6": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Valid tags with file param (optional close)",
          "name": "meta.string.tag.${2:/downcase}.self-closing.renpy",
          "match": "({)\\s*(font)(=)([\\w.]+)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value.renpy string.unquoted.renpy" },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Color tag",
          "match": "({)\\s*(color|outlinecolor)(=)(#?[a-zA-Z0-9]+)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "patterns": [ { "include": "#hex_literal" } ]
            },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "a tag",
          "match": "({)\\s*(a)(=)(.*?)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": {
              "patterns": [
                {
                  "match": "\\b(jump)\\b(:)([[:alpha:]_]\\w*)",
                  "captures": {
                    "1": { "name": "keyword.control.flow.jump.renpy" },
                    "2": { "name": "keyword.operator.jump.renpy punctuation.colon.renpy" },
                    "3": {
                      "patterns": [
                        { "include": "#label-name" },
                        { "include": "#fallback-patterns" }
                      ]
                    }
                  }
                },
                {
                  "match": ".*",
                  "name": "support.constant.property-value.renpy string.unquoted.renpy"
                }
              ]
            },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Close tags",
          "match": "({/)\\s*([[:alpha:]_]?\\w*)(=?)(.*?)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.end.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value.renpy string.unquoted.renpy" },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        },
        {
          "comment": "Custom tags (optional close)",
          "match": "({)\\s*([[:alpha:]_]?\\w*)(=?)(.*?)\\s*(})",
          "captures": {
            "0": { "name": "meta.string.tag.${2:/downcase}.start.renpy" },
            "1": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.begin.renpy" },
            "2": { "name": "entity.name.tag.${2:/downcase}.renpy" },
            "3": { "name": "punctuation.separator.key-value.renpy keyword.operator.assignment.renpy" },
            "4": { "name": "support.constant.property-value.renpy string.unquoted.renpy" },
            "5": { "name": "constant.character.format.placeholder.other.renpy punctuation.definition.tag.end.renpy" }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.renpy",
      "begin": "\"\"\"|\"|'''|'|```|`",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.renpy" }
      },
      "end": "(?<![^\\\\]\\\\)(((?<=\\0)\\0)|\\0)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.string.end.renpy" },
        "2": { "name": "meta.empty-string.renpy" }
      },
      "patterns": [ { "include": "#strings-interior" } ]
    },

    "python-statements": {
      "patterns": [
        {
          "match": "(?<=^[ \\t]*)(init)([ \\t]+)(offset)([ \\t]*)(=)([ \\t]*)(-)?([^#]*?)$",
          "captures": {
            "1": { "name": "keyword.init.renpy" },
            "2": { "name": "punctuation.whitespace.renpy" },
            "3": { "name": "keyword.offset.renpy" },
            "4": { "name": "punctuation.whitespace.renpy" },
            "5": { "name": "keyword.operator.assignment.renpy" },
            "6": { "name": "punctuation.whitespace.renpy" },
            "7": { "name": "keyword.operator.arithmetic.minus.renpy" },
            "8": {
              "patterns": [ { "include": "#num-int" }, { "include": "#invalid-token" } ]
            }
          }
        },
        {
          "comment": "Renpy python block",
          "contentName": "meta.embedded.block.python",
          "begin": "(?<=(^[ \\t]*))(?:(init)(?:([ \\t]+)(-)?(\\d+))?([ \\t]+))?(python)(.*)?(:)",
          "beginCaptures": {
            "2": { "name": "keyword.init.renpy" },
            "3": { "name": "punctuation.whitespace.renpy" },
            "4": { "name": "keyword.operator.arithmetic.minus.renpy" },
            "5": { "name": "constant.numeric.integer.renpy" },
            "6": { "name": "punctuation.whitespace.renpy" },
            "7": { "name": "keyword.python.renpy" },
            "8": {
              "name": "meta.python.block.arguments.renpy",
              "patterns": [
                {
                  "comment": "in statement",
                  "begin": "\\b(in)\\b",
                  "beginCaptures": {
                    "1": { "name": "keyword.control.flow.in.renpy" }
                  },
                  "end": "(?!\\G)(?<=[^ \\t])|$",
                  "patterns": [
                    {
                      "name": "entity.name.namespace",
                      "match": "\\b[\\p{XID_Start}_]\\p{XID_Continue}*\\b"
                    },
                    { "include": "#fallback-patterns" }
                  ]
                },
                {
                  "comment": "keywords",
                  "match": "\\b(hide)|(early)|(in)\\b",
                  "captures": {
                    "1": { "name": "keyword.hide.renpy" },
                    "2": { "name": "keyword.early.renpy" },
                    "3": { "name": "keyword.control.flow.in.renpy" }
                  }
                }
              ]
            },
            "9": { "name": "punctuation.section.python.begin.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [ { "include": "source.renpy.python" } ]
        },
        { "include": "#define" },
        { "include": "#default-statement" },
        { "include": "#one-line-python" },
        { "include": "#python-block-tester" }
      ]
    },
    "python-block-tester": {
      "patterns": [
        {
          "comment": "Check for assignments that support python expressions",
          "contentName": "meta.python.expression.renpy",
          "begin": "(?<=(^[ \\t]*)(?:image)\\b.*?)(=)",
          "beginCaptures": {
            "2": { "name": "keyword.operator.assignment.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [ { "include": "source.renpy.python" } ]
        },
        {
          "contentName": "meta.embedded.block.python",
          "begin": "(?<=(^[ \\t]*).*?python\\b\\s*)(:)",
          "beginCaptures": {
            "2": { "name": "punctuation.section.python.begin.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [ { "include": "source.renpy.python" } ]
        }
      ]
    },

    "define": {
      "begin": "(?<=^[ \\t]*)(define)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.define.renpy" }
      },
      "end": "$",
      "patterns": [
        { "include": "#num-int" },
        { "include": "#strings" },
        { "include": "source.renpy.python#expression" },
        {
          "contentName": "meta.python.expression.renpy",
          "begin": "(\\+=)|(\\|=)|(=)",
          "beginCaptures": {
            "1": { "name": "keyword.operator.plus.assign.renpy" },
            "2": { "name": "keyword.operator.bitwise.or.assign.renpy" },
            "3": { "name": "keyword.operator.assignment.renpy" }
          },
          "end": "$",
          "patterns": [
            { "include": "source.renpy.python#expression" },
            { "include": "#whitespace" }
          ]
        },
        { "include": "#fallback-patterns" }
      ]
    },
    "default-statement": {
      "begin": "(?<=^[ \\t]*)(default)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.default.renpy" }
      },
      "end": "$",
      "patterns": [
        { "include": "#strings" },
        { "include": "source.renpy.python#expression" },
        {
          "contentName": "meta.python.expression.renpy",
          "begin": "=",
          "beginCaptures": {
            "0": { "name": "keyword.operator.assignment.renpy" }
          },
          "end": "$",
          "patterns": [ { "include": "source.renpy.python#expression" }, { "include": "#whitespace" } ]
        },
        { "include": "#whitespace" }
      ]
    },
    "one-line-python": {
      "begin": "(?<=^[ \\t]*)(\\$)(?=[ \\t]|$)",
      "beginCaptures": {
        "1": { "name": "keyword.dollar.sign.renpy" }
      },
      "end": "$",
      "patterns": [
        { "include": "#strings" },
        { "include": "source.renpy.python#expression" },
        { "include": "#fallback-patterns" }
      ]
    },

    "say-statements": {
      "patterns": [
        {
          "name": "meta.say.statement.renpy",
          "contentName": "renpy.meta.say.$1 string.quoted.renpy",
          "begin": "(?<=^[ \\t]+)(?:([a-zA-Z_]\\w*)\\b|\"([a-zA-Z_]\\w*)\\b\")((?:[ \\t]+(?:@|\\w+))*)?[ \\t]*(\"\"\"|\"|'''|'|```|`)",
          "beginCaptures": {
            "1": {
              "name": "renpy.meta.character.$1 variable.other.renpy",
              "patterns": [
                {
                  "match": "extend",
                  "name": "keyword.extend.renpy"
                },
                {
                  "match": "voice",
                  "name": "keyword.voice.renpy"
                },
                {
                  "comment": "Match special characters",
                  "match": "adv|nvl|narrator|name_only|centered|vcentered",
                  "name": "variable.other.constant.renpy"
                }
              ]
            },
            "2": { "name": "meta.string.character.$2.renpy" },
            "3": {
              "name": "meta.arguments.renpy",
              "patterns": [
                {
                  "name": "keyword.at.renpy",
                  "match": "@"
                }
              ]
            },
            "4": { "name": "string.quoted.renpy punctuation.definition.string.begin.renpy" }
          },
          "end": "(?<![^\\\\]\\\\)(((?<=\\4)\\4)|\\4)([ \\t]*\\(.*?\\)(?![^\\(]*?\\)))?",
          "endCaptures": {
            "1": { "name": "string.quoted.renpy punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.renpy" },
            "3": {
              "name": "meta.say.arguments.renpy",
              "patterns": [ { "include": "source.renpy.python#odd-function-call" } ]
            }
          },
          "patterns": [ { "include": "#strings-interior" } ]
        },
        {
          "name": "meta.say.narrator.renpy meta.say.statement.renpy",
          "begin": "(?<=(^[ \\t]+))(?=r?(?:\"|'|`))",
          "end": "$",
          "patterns": [
            { "include": "#strings" },
            { "include": "source.renpy.python#odd-function-call" },
            { "include": "#fallback-patterns" }
          ]
        }
      ]
    },

    "pause": {
      "name": "meta.pause.statement.renpy",
      "contentName": "meta.pause.parameters.renpy",
      "begin": "(?<=^[ \\t]+)(pause)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.pause.renpy" }
      },
      "end": "(?=#)|$",

      "patterns": [ { "include": "#simple-expression" } ]
    },

    "renpy-block-tester": {
      "contentName": "meta.renpy.block.renpy",
      "begin": "(?<=(^[ \\t]*)(?:if|elif|else|for|while|label)\\b.*?)(:)",
      "beginCaptures": {
        "2": { "name": "punctuation.section.block.begin.renpy" }
      },
      "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
      "patterns": [ { "include": "#base-patterns" } ]
    },

    "conditionals": {
      "begin": "(?<=^[ \\t]+)(if|elif|else|while|for)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.renpy" }
      },
      "end": "(?=#|:)|$",
      "patterns": [
        { "include": "source.renpy.python#expression" },
        { "include": "#fallback-patterns" }
      ]
    },

    "at-statement": {
      "name": "meta.at.statement.renpy",
      "contentName": "meta.at.parameters.renpy",
      "begin": "\\b(?!\\.)(at)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.at.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#simple-expression" } ]
    },
    "as-statement": {
      "name": "meta.as.statement.renpy",
      "contentName": "meta.as.parameters.renpy",
      "begin": "\\b(?!\\.)(as)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.as.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#whitespace" }, { "include": "#simple-expression" } ]
    },
    "with-statement": {
      "name": "meta.with.statement.renpy",
      "contentName": "meta.with.parameters.renpy",
      "begin": "\\b(?!\\.)(with)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.with.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#whitespace" }, { "include": "#simple-expression" } ]
    },
    "behind": {
      "name": "meta.behind.statement.renpy",
      "contentName": "meta.behind.parameters.renpy",
      "begin": "\\b(?!\\.)(behind)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.behind.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#whitespace" }, { "include": "#simple-expression" } ]
    },
    "onlayer": {
      "name": "meta.onlayer.statement.renpy",
      "contentName": "meta.onlayer.parameters.renpy",
      "begin": "\\b(?!\\.)(onlayer)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.onlayer.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#whitespace" }, { "include": "#simple-expression" } ]
    },
    "zorder": {
      "name": "meta.zorder.statement.renpy",
      "contentName": "meta.zorder.parameters.renpy",
      "begin": "\\b(?!\\.)(zorder)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.zorder.renpy" }
      },
      "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|=|:)|$",

      "patterns": [ { "include": "#whitespace" }, { "include": "#simple-expression" } ]
    },
    "image": {
      "patterns": [
        {
          "name": "meta.image.statement.renpy",
          "begin": "(?<=^[ \\t]*)(image)\\b[ \\t]*",
          "beginCaptures": {
            "1": { "name": "keyword.image.renpy" }
          },
          "end": "(?=\\b(at|with)\\b|#|=|:)|$",
          "patterns": [
            { "include": "#strings" },
            {
              "match": "\\b(?:[a-zA-Z_0-9]+)\\b[ \\t]*",
              "name": "entity.name.type.image.renpy"
            }
          ]
        },
        { "include": "#at-statement" },
        { "include": "#with-statement" }
      ]
    },

    "layeredimage-block-tester": {
      "contentName": "meta.layeredimage.block.renpy",
      "begin": "(?<=(^[ \\t]*)(?:layeredimage|group|always|attribute)\\b.*?)(:)",
      "beginCaptures": {
        "2": { "name": "punctuation.section.block.begin.renpy" }
      },
      "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
      "patterns": [
        {
          "name": "keyword.always.renpy",
          "match": "\\b(?:always)\\b"
        },
        {
          "name": "keyword.always.renpy",
          "match": "\\b(?:pos)\\b"
        },
        { "include": "#layeredimage-group" },
        { "include": "#layeredimage-attribute" },
        { "include": "#base-patterns" }
      ]
    },
    "layeredimage-group": {
      "patterns": [
        {
          "name": "meta.layeredimage.group.statement.renpy",
          "contentName": "meta.layeredimage.group.parameters.renpy",
          "begin": "(?<=^[ \\t]*)(group)\\b",

          "beginCaptures": {
            "1": { "name": "keyword.group.renpy" }
          },
          "end": "(?=#|:)|$",
          "patterns": [
            {
              "name": "entity.name.type.layeredimage..renpy",
              "match": "\\b([[:alpha:]_]\\w*)\\b"
            },
            { "include": "#fallback-patterns" }
          ]
        },
        { "include": "#layeredimage-block-tester" }
      ]
    },
    "layeredimage-attribute": {
      "patterns": [
        {
          "name": "meta.layeredimage.attribute.statement.renpy",
          "contentName": "meta.layeredimage.attribute.parameters.renpy",
          "begin": "(?<=^[ \\t]*)(attribute)\\b",

          "beginCaptures": {
            "1": { "name": "keyword.attribute.renpy" }
          },
          "end": "(?=#|:)|$",
          "patterns": [
            {
              "name": "keyword.default.renpy",
              "match": "\\b(default)\\b"
            },
            {
              "name": "entity.name.type.layeredimage.attribute.renpy",
              "match": "\\b([[:alpha:]_]\\w*)\\b"
            },
            { "include": "#fallback-patterns" }
          ]
        },
        { "include": "#layeredimage-block-tester" }
      ]
    },
    "layeredimage": {
      "patterns": [
        {
          "name": "meta.layeredimage.statement.renpy",
          "contentName": "meta.layeredimage.parameters.renpy",
          "begin": "(?<=^[ \\t]*)(layeredimage)\\b",

          "beginCaptures": {
            "1": { "name": "keyword.layeredimage.renpy" }
          },
          "end": "(?=#|:)|$",
          "patterns": [
            {
              "name": "entity.name.type.layeredimage.renpy",
              "match": "\\b([[:alpha:]_]\\w*)\\b"
            },
            { "include": "#fallback-patterns" }
          ]
        },
        { "include": "#layeredimage-block-tester" }
      ]
    },
    "translate-block-tester": {
      "patterns": [
        {
          "contentName": "meta.translate.block.renpy",
          "begin": "(?<=(^[ \\t]*)(?:translate)\\b.*?)(:)",
          "beginCaptures": {
            "2": { "name": "punctuation.section.block.begin.renpy" }
          },
          "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
          "patterns": [
            { "include": "#base-patterns" }
          ]
        }
      ]
    },
    "translate": {
      "patterns": [
        {
          "name": "meta.translate.statement.renpy",
          "contentName": "meta.translate.parameters.renpy",
          "begin": "(?<=^[ \\t]*)(translate)\\b",

          "beginCaptures": {
            "1": { "name": "keyword.translate.renpy" }
          },
          "end": "(?=#|:)|$",
          "patterns": [
            {
              "name": "constant.language.renpy",
              "match": "\\b(?<!\\.)(None)\\b"
            },
            {
              "name": "keyword.other.renpy",
              "match": "\\b(?<!\\.)(strings|style|default|python)\\b"
            },
            {
              "comment": "Only the first word is the language name",
              "name": "entity.name.type.language.translate.renpy",
              "match": "(?<=translate[ \\t]+)\\b([[:alpha:]_]\\w*)\\b"
            },
            { "include": "#label-access" },
            { "include": "#label-name" },
            { "include": "#fallback-patterns" }
          ]
        },
        { "include": "#python-block-tester" },
        { "include": "#translate-block-tester" }
      ]
    },
    "show": {
      "patterns": [
        {
          "name": "meta.show.statement.renpy",
          "begin": "(?<=^[ \\t]*)(show)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.show.renpy" }
          },
          "end": "(?=#|:)|$",
          "patterns": [
            { "include": "#screen-call" },
            { "include": "#strings" },

            {
              "name": "keyword.layer.renpy",
              "match": "\\b(layer)\\b"
            },
            {
              "name": "keyword.nopredict.renpy",
              "match": "\\b(nopredict)\\b"
            },

            { "include": "#at-statement" },
            { "include": "#as-statement" },
            { "include": "#with-statement" },
            { "include": "#behind" },
            { "include": "#onlayer" },
            { "include": "#zorder" },
            {
              "match": "\\b(?:[a-zA-Z_0-9]+)\\b",
              "name": "entity.name.type.image.renpy"
            },
            { "include": "#fallback-patterns" }
          ]
        }
      ]
    },
    "window": {
      "patterns": [
        {
          "name": "meta.show.statement.renpy",
          "begin": "(?<=^[ \\t]*)(window)",
          "beginCaptures": {
            "1": { "name": "keyword.window.renpy" }
          },
          "end": "$",
          "patterns": [
            {
              "name": "keyword.control.flow.show.renpy",
              "match": "\\b(show)\\b"
            },
            {
              "name": "keyword.control.flow.hide.renpy",
              "match": "\\b(hide)\\b"
            },
            { "include": "#whitespace" },
            { "include": "#simple-expression" }
          ]
        }
      ]
    },
    "hide": {
      "patterns": [
        {
          "name": "meta.hide.statement.renpy",
          "begin": "(?<=^[ \\t]*)(hide)\\b[ \\t]*",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.hide.renpy" }
          },
          "end": "$",
          "patterns": [
            { "include": "#screen-call" },
            { "include": "#strings" },
            { "include": "#with-statement" },
            { "include": "#behind" },
            { "include": "#zorder" },
            {
              "match": "\\b(?:[a-zA-Z_0-9]+)\\b[ \\t]*",
              "name": "entity.name.type.image.renpy"
            },
            { "include": "#fallback-patterns" }
          ]
        }
      ]
    },
    "scene": {
      "patterns": [
        {
          "name": "meta.scene.statement.renpy",
          "begin": "(?<=^[ \\t]*)(scene)\\b[ \\t]*",
          "beginCaptures": {
            "1": { "name": "keyword.scene.renpy" }
          },
          "end": "(?=\\b(at|as|behind|onlayer|expression|with|zorder)\\b|#|:)|$",
          "patterns": [
            { "include": "#strings" },
            {
              "match": "\\b(?:[a-zA-Z_0-9]+)\\b[ \\t]*",
              "name": "entity.name.type.image.renpy"
            }
          ]
        },
        { "include": "#with-statement" },
        { "include": "#behind" },
        { "include": "#onlayer" },
        { "include": "#zorder" }
      ]
    },
    "camera": {
      "patterns": [
        {
          "name": "meta.camera.statement.renpy",
          "begin": "(?<=^[ \\t]*)(camera)\\b[ \\t]*",
          "beginCaptures": {
            "1": { "name": "keyword.camera.renpy" }
          },
          "end": "(?=\\b(at|with)\\b|#|:)|$",
          "patterns": [
            {
              "match": "\\b(?:[a-zA-Z_0-9]+)\\b[ \\t]*",
              "name": "entity.name.type.image.renpy"
            }
          ]
        },
        { "include": "#at-statement" },
        { "include": "#with-statement" }
      ]
    },

    "screen-call": {
      "name": "meta.screen.call.renpy",
      "begin": "(?<=(?:call|show|hide)[ \\t]+)(screen)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.screen.renpy" }
      },
      "end": "(?!\\G)(?<=[^ \\t])",
      "patterns": [
        {
          "comment": "Label expression",
          "begin": "(?<=screen[ \\t]+)(?=[a-zA-Z_.])",
          "end": "(?![a-zA-Z_.])(?![ \\t]*\\.[ \\t]*)",
          "patterns": [ { "include": "#label-call" }, { "include": "#label-access" }, { "include": "#label-name" } ]
        },
        { "include": "#with-statement" },
        { "include": "#whitespace" }
      ]
    },

    "builtin-labels": {
      "name": "support.function.builtin.renpy",
      "match": "(?<!\\.)\\b(?:start|quit|after_load|splashscreen|before_main_menu|main_menu|after_warp|hide_windows)\\b"
    },
    "label-name": {
      "patterns": [
        { "include": "source.renpy.python#builtin-possible-callables" },
        { "include": "#builtin-labels" },
        {
          "name": "entity.name.function.label.renpy",
          "match": "\\b(?:[a-zA-Z_]\\w*)\\b"
        }
      ]
    },
    "label-call": {
      "comment": "Note: label params are only allowed at the end of the access expression",
      "name": "meta.function-call.label.renpy",
      "begin": "\\b(?=([a-zA-Z_]\\w*)\\s*(\\())",
      "end": "(\\))",
      "endCaptures": {
        "1": { "name": "punctuation.definition.arguments.end.renpy" }
      },
      "patterns": [ { "include": "source.renpy.python#special-variables" }, { "include": "#label-name" }, { "include": "source.renpy.python#function-arguments" } ]
    },
    "label-access": {
      "comment": "Note: Labels can't be nested twice in a row!",
      "name": "meta.member.access.label.renpy",
      "begin": "(\\.)\\s*(?!\\.)",
      "end": "(?<=\\S)(?=\\W)|(^|(?<=\\s))(?=[^\\\\\\w\\s])|$",
      "beginCaptures": {
        "1": { "name": "punctuation.separator.dot.renpy" }
      },
      "patterns": [ { "include": "#label-call" }, { "include": "#label-name" } ]
    },
    "label-def-name": {
      "comment": "Note: Labels can't be nested twice in a row!",
      "patterns": [
        { "include": "source.renpy.python#builtin-possible-callables" },
        { "include": "#builtin-labels" },
        {
          "match": "(?<=^|[ \\t])(\\b(?:[a-zA-Z_]\\w*)\\b)?(\\.)?(\\b(?:[a-zA-Z_]\\w*)\\b)",
          "captures": {
            "1": { "name": "entity.name.function.label.renpy" },
            "2": { "name": "punctuation.separator.dot.renpy" },
            "3": { "name": "entity.name.function.label.renpy" }
          }
        }
      ]
    },
    "label": {
      "name": "meta.label.statement.renpy",
      "begin": "(?<=^[ \\t]*)(label)\\b",
      "end": "(?=#|:)|$",
      "beginCaptures": {
        "1": { "name": "storage.type.function.label.renpy" }
      },
      "patterns": [
        {
          "name": "keyword.control.flow.hide.renpy",
          "match": "\\b(?<!\\.)(hide)\\b"
        },
        { "include": "#label-def-name" },
        { "include": "source.renpy.python#parameters" },
        { "include": "#fallback-patterns-with-error" }
      ]
    },
    "return-statements": {
      "begin": "(?<=^[ \\t]+)(return)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.return.renpy" }
      },
      "end": "$",
      "patterns": [ { "include": "#renpy-only-expressions" }, { "include": "source.renpy.python#expression" } ]
    },
    "call-jump-expression": {
      "begin": "\\b(?<!\\.)(expression)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.expression.renpy" }
      },
      "end": "(?=\\b(?<!\\.)(?:pass|from)\\b)|$",
      "patterns": [ { "include": "#renpy-only-expressions" }, { "include": "source.renpy.python#expression" } ]
    },
    "jump": {
      "name": "meta.jump.statement.renpy",
      "begin": "(?<=^[ \\t]+)(jump)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.jump.renpy" }
      },
      "end": "(?=#)|$",
      "endCaptures": {
        "1": { "name": "invalid.illegal.renpy" }
      },
      "patterns": [
        { "include": "#call-jump-expression" },
        {
          "comment": "Label expression",
          "begin": "(?=[a-zA-Z_.])",
          "end": "(?![a-zA-Z_.])(?![ \\t]*\\.[ \\t]*)",
          "patterns": [ { "include": "#label-access" }, { "include": "#label-name" } ]
        },
        { "include": "#whitespace" }
      ]
    },
    "call-pass": {
      "begin": "\\b(?<!\\.)(pass)\\b(?=[ \\t]*\\()",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.pass.renpy" }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": { "name": "punctuation.definition.arguments.end.renpy" }
      },
      "patterns": [
        { "include": "source.renpy.python#function-arguments" },
        { "include": "#whitespace" }
      ]
    },
    "call-from": {
      "name": "meta.from.clause.renpy",
      "contentName": "meta.from.arguments.renpy",
      "begin": "\\b(?<!\\.)(from)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.from.renpy" }
      },
      "end": "(?!\\G)(?<=[^ \\t])|$",
      "patterns": [
        { "include": "#label-name" },
        { "include": "#fallback-patterns" }
      ]
    },
    "call": {
      "name": "meta.call.statement.renpy",
      "contentName": "meta.call.arguments.renpy",
      "begin": "(?<=^[ \\t]+)(call)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.control.flow.call.renpy" }
      },
      "end": "$",
      "endCaptures": {
        "1": { "name": "invalid.illegal.renpy" }
      },
      "patterns": [
        { "include": "#call-jump-expression" },
        { "include": "#call-pass" },
        { "include": "#call-from" },
        { "include": "#screen-call" },
        {
          "name": "keyword.nopredict.renpy",
          "match": "\\b(nopredict)\\b"
        },
        { "include": "#with-statement" },
        {
          "comment": "Label expression",
          "begin": "(?<=call[ \\t]+)(?=[a-zA-Z_.])",
          "end": "(?![a-zA-Z_.])(?![ \\t]*\\.[ \\t]*)",
          "patterns": [ { "include": "#label-call" }, { "include": "#label-access" }, { "include": "#label-name" } ]
        },
        { "include": "#whitespace" },
        { "include": "#comments" },
        {
          "match": "[^ \\t]+",
          "name": "invalid.illegal.unexpected-characters-call-arguments.renpy"
        }
      ]
    },
    "menu-option": {
      "contentName": "meta.menu-option.block.renpy",
      "begin": "(?<=(^[ \\t]+))((?:\".*\")|(?:'.*')|(?:\"\"\".*\"\"\"))(.+)?(:)",
      "beginCaptures": {
        "2": {
          "name": "meta.menu-option.renpy",
          "patterns": [ { "include": "#strings" } ]
        },
        "3": {
          "name": "meta.embedded.line.python",
          "patterns": [
            { "include": "source.renpy.python#odd-function-call" },
            {
              "comment": "if condition",
              "begin": "\\b(if)\\b",
              "beginCaptures": {
                "1": { "name": "keyword.control.conditional.renpy" }
              },
              "end": "(?=#|:)|$",
              "patterns": [ { "include": "source.renpy.python#expression" } ]
            }
          ]
        },
        "4": { "name": "punctuation.section.menu-option.begin.renpy" }
      },
      "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
      "patterns": [ { "include": "#base-patterns" } ]
    },
    "menu-set": {
      "contentName": "meta.embedded.line.python",
      "begin": "(?<=^[ \\t]+)(set)\\b",
      "beginCaptures": {
        "1": { "name": "keyword.set.renpy" }
      },
      "end": "$",
      "patterns": [ { "include": "source.renpy.python#expression" } ]
    },
    "menu": {
      "name": "meta.menu.statement.renpy",
      "contentName": "meta.menu.block.renpy",
      "begin": "(?<=(^[ \\t]*))(menu)[ \\t]*(.+)?(:)",
      "beginCaptures": {
        "2": { "name": "storage.type.function.renpy" },
        "3": {
          "patterns": [
            {
              "comment": "Menu name",
              "match": "[a-zA-Z_.]\\w*",
              "name": "entity.name.function.menu.renpy"
            },
            {
              "name": "meta.function-call.python",
              "begin": "(?<=\\bmenu\\s*)(?=\\()",
              "end": "(\\))",
              "endCaptures": {
                "1": { "name": "punctuation.definition.arguments.end.python" }
              },
              "patterns": [ { "include": "source.renpy.python#function-arguments" } ]
            }
          ]
        },
        "4": { "name": "punctuation.section.menu.begin.renpy" }
      },
      "end": "^(?=(?!\\1)[ \\t]*[^\\s#]|\\1[^\\s#])",
      "patterns": [ { "include": "#comments" }, { "include": "#menu-option" }, { "include": "#say-statements" }, { "include": "#menu-set" }, { "include": "#fallback-patterns" } ]
    },
    "builtin-audio-channels": {
      "name": "support.type.audio.channel.renpy",
      "match": "(?<!\\.)\\b(?:music|sound|voice|audio)\\b"
    },
    "audio-channel": {
      "patterns": [
        { "include": "#builtin-audio-channels" },
        {
          "match": ".+",
          "name": "entity.name.type.audio.channel.renpy"
        }
      ]
    },
    "audio-params": {
      "patterns": [
        {
          "name": "keyword.other.audio.renpy",
          "match": "\\b(?<!\\.)(?:fadeout|fadein|volume|loop|noloop)\\b"
        },
        { "include": "source.renpy.python#number" }
      ]
    },
    "play": {
      "patterns": [
        {
          "name": "meta.play.audio.statement.renpy",
          "begin": "(?<=^[ \\t]*)(play)\\b[ \\t]+\\b([a-zA-Z_0-9]*)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.play.renpy" },
            "2": {
              "patterns": [ { "include": "#audio-channel" } ]
            }
          },
          "end": "(?=#)|$",
          "patterns": [ { "include": "#strings" }, { "include": "#audio-params" }, { "include": "source.renpy.python#expression" }, { "include": "#whitespace" } ]
        }
      ]
    },
    "queue": {
      "patterns": [
        {
          "name": "meta.queue.audio.statement.renpy",
          "begin": "(?<=^[ \\t]*)(queue)\\b[ \\t]+\\b([a-zA-Z_0-9]*)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.queue.renpy" },
            "2": {
              "patterns": [ { "include": "#audio-channel" } ]
            }
          },
          "end": "(?=#)|$",
          "patterns": [ { "include": "#strings" }, { "include": "#audio-params" }, { "include": "source.renpy.python#expression" }, { "include": "#whitespace" } ]
        }
      ]
    },
    "stop": {
      "patterns": [
        {
          "name": "meta.stop.audio.statement.renpy",
          "begin": "(?<=^[ \\t]*)(stop)\\b[ \\t]+\\b([a-zA-Z_0-9]*)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.stop.renpy" },
            "2": {
              "patterns": [ { "include": "#audio-channel" } ]
            }
          },
          "end": "(?=#)|$",
          "patterns": [
            {
              "name": "keyword.fadeout.renpy",
              "match": "\\b(?<!\\.)(?:fadeout)\\b"
            },
            { "include": "source.renpy.python#number" },
            { "include": "#whitespace" }
          ]
        }
      ]
    },
    "audio": {
      "patterns": [ { "include": "#play" }, { "include": "#queue" }, { "include": "#stop" } ]
    },

    "renpy-statements": {
      "patterns": [
        { "include": "#label" },
        { "include": "#menu" },
        { "include": "#image" },
        { "include": "#layeredimage" },
        { "include": "#translate" },
        { "include": "#audio" },
        { "include": "#pause" },
        { "include": "source.renpy.atl#transform" },
        { "include": "source.renpy.atl#atl-block-tester" },
        { "include": "#scene" },
        { "include": "#camera" },
        { "include": "#window" },
        { "include": "#show" },
        { "include": "#hide" },
        { "include": "#with-statement" },
        { "include": "source.renpy.screen#screen" },
        { "include": "source.renpy.style#style" },
        { "include": "#return-statements" },
        { "include": "#jump" },
        { "include": "#call" }
      ]
    },
    "base-patterns": {
      "patterns": [ { "include": "#statements" }, { "include": "#expressions" } ]
    }
  }
}
