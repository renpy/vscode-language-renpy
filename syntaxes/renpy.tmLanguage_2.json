{
  "name": "Ren'Py",
  "scopeName": "source.renpy",
  "firstLineMatch": "^#!/.*\\brenpy\\b",
  "patterns": [
    { "include": "#statements" },
    { "include": "#expressions" }
  ],
  "repository": {
    "statements": {
      "patterns": [
        { "include": "#comments" },
        { "include": "#python-statements" },
        { "include": "#renpy-keywords" }
      ]
    },
    "expressions": {
      "patterns": [
        { "include": "#strings" }
      ]
    },

    "python-statements": {
      "patterns": [
        {
          "comment": "Renpy python block",
          "contentName": "meta.embedded.block.python",

          "begin": "(^[ \\t]+)?\\b(?:(init) (?:(-)?(\\d*) )?)?(python)([\\w \\t]*)(:)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.python"
            },
            "2": {
              "comment": "init",
              "name": "keyword.renpy"
            },
            "3": {
              "comment": "- sign",
              "name": "keyword.operator.arithmetic.python"
            },
            "4": {
              "comment": "init priority numeric",
              "name": "constant.numeric.dec.python"
            },
            "5": {
              "comment": "python",
              "name": "keyword.renpy"
            },
            "6": {
              "comment": "Statement options",
              "name": "meta.embedded.block.python.options",

              "patterns": [
                {
                  "comment": "in statement",
                  "match": "(?: (in) (\\w+))",
                  "captures":
                  {
                    "1": {
                      "comment": "in",
                      "name": "keyword.renpy"
                    },
                    "2": {
                      "comment": "namespace",
                      "name": "entity.name.namespace"
                    }
                  }
                },
                {
                  "comment": "keywords",
                  "match": "\\b(hide|early|in)\\b",
                  "name": "keyword.renpy"
                }
              ]
            },
            "7": {
              "name": "punctuation.section.python.begin.renpy"
            }
          },
          "end":"^(?!(\\1[ \\t]+)|($))",
          "patterns": [{ "include": "source.python" }]
        },
        {
          "comment": "Match begin and end of python one line statements",
          "contentName": "meta.embedded.line.python",
          "begin": "(\\$|\\bdefine|\\bdefault)(?=\\s)",
          "beginCaptures": {
            "1": {
              "name": "keyword.renpy"
            }
          },
          "end": "\\R$",

          "patterns": [
            {
              "comment": "Type the first name as a variable (Probably not needed, but python doesn't seem to catch it)",
              "match": "(?<!\\.)\\b(\\w+)(?=\\s=\\s)",
              "name": "variable.other.python"
            },
            { "include": "source.python" }
          ]
        }
      ]
    },
    "renpy-keywords": {
      "patterns": [
        { "match": "\\$", "name": "keyword.renpy" },
        {
          "match": "\\b(\\$|init|python|early|in|define|default)\\b",
          "name": "keyword.renpy"
        },
        {
          "match": "(?<=init\\s)-?\\d+",
          "name": "constant.numeric"
        },
        {
          "match": "(?<=in\\s)\\w+",
          "name": "entity.name.namespace"
        }
      ]
    },
    "codetags": {
      "match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
      "captures": { "1": { "name": "keyword.codetag.notation.renpy" } }
    },
    "comments": {
      "name": "comment.line.number-sign.renpy",
      "begin": "(\\#)",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.comment.renpy" }
      },
      "end": "($)",
      "patterns": [{ "include": "#codetags" }]
    },
    
    "strings": {
      "patterns": [
        { "include": "#string-quoted-double" },
        { "include": "#string-quoted-single" },
        { "include": "#string-quoted-back" }
      ]
    },
    "string-quoted-double": {
      "patterns": [
        {
          "comment": "double quoted block string",
          "name": "string.quoted.double.block.renpy",
          "begin": "(\"\"\")",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=\"\"\")(\")\"\"|\"\"\")",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.double.block.renpy" }
          }
        },
        {
          "comment": "Dobule quoted single line string",
          "name": "string.quoted.double.line.renpy",
          "begin": "(\")",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=\")(\")|\")",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.double.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          }
        }
      ]
    },
    "string-quoted-single": {
      "patterns": [
        {
          "comment": "Single quoted block string",
          "name": "string.quoted.single.block.renpy",
          "begin": "(''')",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=''')('|''')|''')",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.single.block.renpy" }
          }
        },
        {
          "comment": "Single quoted single line string",
          "name": "string.quoted.single.line.renpy",
          "begin": "(')",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=')(')|')",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.single.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          }
        }
      ]
    },
    "string-quoted-back": {
      "patterns": [
        {
          "comment": "Back quoted block string",
          "name": "string.quoted.back.block.renpy",
          "begin": "(```)",
          "beginCaptures": {
            "0": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=```)(`)``|```)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.back.block.renpy" }
          }
        },
        {
          "comment": "Back quoted single line string",
          "name": "string.quoted.back.line.renpy",
          "begin": "(`)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.string.begin.renpy" }
          },
          "end": "((?<=`)(`)|`)",
          "endCaptures": {
            "1": { "name": "punctuation.definition.string.end.renpy" },
            "2": { "name": "meta.empty-string.back.renpy" },
            "3": { "name": "invalid.illegal.unclosed-string.renpy" }
          }
        }
      ]
    }
  }
}
