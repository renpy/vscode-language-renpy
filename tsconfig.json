{
  /* Visit https://aka.ms/tsconfig.json to read more about this file */
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["ESNext"],
    "baseUrl": ".", // Base directory to resolve non-absolute module names.
    "rootDir": "src",
    "outDir": "out",

    /* Strict Type-Checking Option */
    "strict": true /* enable all strict type-checking options */,
    // "noImplicitAny": true, // Raise error on expressions and declarations with an implied 'any' type.
    // "strictNullChecks": true, // Enable strict null checks.
    // "strictFunctionTypes": true, // Enable strict checking of function types.
    // "strictBindCallApply": true, // Enable strict 'bind', 'call', and 'apply' methods on functions.
    // "strictPropertyInitialization": true, // Enable strict checking of property initialization in classes.
    // "useUnknownInCatchVariables": true, // In TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from any to unknown.
    // "noImplicitThis": true, // Raise error on 'this' expressions with an implied 'any' type.
    // "alwaysStrict": true, // Parse in strict mode and emit "use strict" for each source file.

    /* Additional Checks */
    "noUnusedLocals": true, // Report errors on unused locals.
    // "noUnusedParameters": true, // Report errors on unused parameters.
    // "noFallthroughCasesInSwitch": true, // Report errors for fallthrough cases in switch statement.
    // "noUncheckedIndexedAccess": true, // Include 'undefined' in index signature results
    // "noPropertyAccessFromIndexSignature": true, // Require undeclared properties from index signatures to use element accesses.
    "noImplicitReturns": true, // Report error when not all code paths in function return a value.
    "noImplicitOverride": true, // Ensure overriding members in derived classes are marked with an 'override' modifier.
    "noImplicitThis": true, // Raise error on 'this' expressions with an implied 'any' type.
    "exactOptionalPropertyTypes": true, // Force exact optional types. (Aka. undefined needs to be added to optionals)

    /* Module Resolution Options */
    "module": "NodeNext",
    "moduleResolution": "nodenext", // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    "resolveJsonModule": true, // Allows importing modules with a .json extension.
    "paths": {
      // A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.
      // "app/*": ["src/app/*"]
      "src/*": ["src/*"]
    },
    // "rootDirs": [], // List of root folders whose combined content represents the structure of the project at runtime.
    "typeRoots": [
      // List of folders to include type definitions from.
      "./node_modules/@types",
      "./types"
    ],
    // "types": [], // Type declaration files to be included in compilation.
    "allowSyntheticDefaultImports": true, // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    "esModuleInterop": true, // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    // "preserveSymlinks": true, // Do not resolve the real path of symlinks.
    // "allowUmdGlobalAccess": true, // Allow accessing UMD globals from modules.

    /* Source Map Options */
    "sourceMap": true,
    // "sourceRoot": "", // Specify the location where debugger should locate TypeScript files instead of source locations.
    // "mapRoot": "", // Specify the location where debugger should locate map files instead of generated locations.
    // "inlineSourceMap": true, // Emit a single file with source maps instead of having a separate file.
    // "inlineSources": true, // Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.

    /* Experimental Options */
    // "experimentalDecorators": true, // Enables experimental support for ES7 decorators.
    // "emitDecoratorMetadata": true, // Enables experimental support for emitting type metadata for decorators.

    /* Advanced Options */
    "skipLibCheck": true, // Skip type checking of declaration files.
    "forceConsistentCasingInFileNames": true // Disallow inconsistently-cased references to the same file.
  },
  "exclude": ["node_modules", ".vscode-test", "dist", "out"],
  "include": ["src/**/*.ts", "./node_modules/vscode/vscode.d.ts", "./node_modules/vscode/lib/*", "node_modules/node-hot-loader/NodeHotLoaderWebpackPlugin.d.ts"]
}
